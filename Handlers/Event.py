import asyncio
import random
from dataclasses import dataclass
from datetime import datetime

from aiogram import Bot
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder, KeyboardBuilder
from aiogram.types import InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.exceptions import TelegramRetryAfter

from Server.Core import QuizDB, QuizUserDB
from Server.Models import User, Quiz, QuizUser


class Keyboards:
    @staticmethod
    def main_keyboard(user: User):
        keyboard = InlineKeyboardBuilder()

        main: InlineKeyboardButton = InlineKeyboardButton(text='ü§Ø  –ö–í–ò–ó  ü§Ø', callback_data='event_quiz')
        back: InlineKeyboardButton = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start_menu')

        keyboard.row(main)
        keyboard.row(back)

        return keyboard

    @staticmethod
    def start_quiz_keyboard():
        keyboard = InlineKeyboardBuilder()

        start: InlineKeyboardButton = InlineKeyboardButton(text='–ö–æ–Ω–µ—á–Ω–æ!', callback_data='event_quiz_started')
        back: InlineKeyboardButton = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='event')

        keyboard.row(start)
        keyboard.row(back)

        return keyboard

    @staticmethod
    def quiz_keyboard(question: Quiz):
        keyboard = InlineKeyboardBuilder()

        vars = question.variants
        random.shuffle(vars)

        [keyboard.row(
            InlineKeyboardButton(text=var, callback_data=f'event_quiz_started?num={question.id}&answer={var[:10]}'))
            for var in vars]
        return keyboard


wrong_answers = ['–ù–µ–≤–µ—Ä–Ω–æ, –Ω–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è: –∫–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!',
                 '–ù–µ–≤–µ—Ä–Ω–æ, –Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –µ—â—ë –æ–¥–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ',
                 '–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫',
                 '–ù—É, –ø–æ—á—Ç–∏']

wrong_stickers = ['CAACAgIAAxkBAAENuihnpJtyCfup6YI8blUccjPiqEikyAACJwADWbv8JYdlBkQXVYX4NgQ',
                  'CAACAgIAAxkBAAENs8JnoICwoeiuCdBlf4x4tqCfOKnYygACfQAD9wLIDy7JuwrdyyJJNgQ',
                  'CAACAgIAAxkBAAENui5npJvdwaOi3lKIYvWzDzDFk9dSugACgwADFjlICdOOLkodWm3jNgQ',
                  'CAACAgIAAxkBAAENs8BnoICOGw9UvyJCDc3wHTs6nwe3wQACDwwAAuKOOUotFzfMTUK3UDYE']

true_answers = ['–î–∞, –≤ —Ç–æ—á–∫—É!',
                '–ó—Ä–∏—à—å –≤ –∫–æ—Ä–µ–Ω—å!',
                '–ö—Ç–æ –ø–æ–Ω—è–ª –∂–∏–∑–Ω—å, —Ç–æ—Ç –Ω–µ —Å–ø–µ—à–∏—Ç']

true_stickers = ['CAACAgIAAxkBAAENuipnpJuE3iPnTgmd878Il6V4W9mZbAACkAADFjlICTxLOubV642ONgQ',
                 'CAACAgIAAxkBAAENujJnpJwPEXJaIelCDnBpOfwefsUbzwACngAD9wLIDxjzyiQZP6pbNgQ',
                 'CAACAgIAAxkBAAENujRnpJwkyeXCoEEqFInekBNPNi4XhwACGgAD9wLID68vCWlyjjbLNgQ',
                 'CAACAgIAAxkBAAENujZnpJw57nH2ytPcZiAX1S2sBgM6NAACjQADFjlICdDOryXD7AkyNgQ']

event_schedule = ('–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø–æ—Å–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø—Ä–∏—É—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–æ –î–Ω—é —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –Ω–∞—É–∫–∏.\n\n'
                  ''
                  '          *7 —Ñ–µ–≤—Ä–∞–ª—è:*\n\n'
                  '*12¬≥‚Å∞ - 14‚Å∞‚Å∞* ‚Äî –∫—Ä—É–≥–ª—ã–π —Å—Ç–æ–ª —Å —É—á—ë–Ω—ã–º–∏ —Ñ–∏–∑—Ñ–∞–∫–∞ "–§–∏–∑–∏–∫–æ–º —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è" –≤ –°–§–ê\n'
                  '*14‚Å∞‚Å∞ - 15¬≤‚Å∞* ‚Äî –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å "–û—Ñ–æ—Ä–º–∏ —Å—Ç–µ–Ω–¥–æ–≤—ã–π –¥–æ–∫–ª–∞–¥", —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è '
                  '–∏–≥—Ä–∞ "AliaScience" –∏ –∫–æ—Ñ–µ-–±—Ä–µ–π–∫ –≤ —Ö–æ–ª–ª–µ –¶–§–ê\n'
                  '*15¬≤‚Å∞ - 16‚Åµ‚Åµ* ‚Äî –õ–µ–∫—Ü–∏—è –æ—Ç "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ" –≤ –°–§–ê\n\n\n'
                  ''
                  '          *12 —Ñ–µ–≤—Ä–∞–ª—è:*\n\n'
                  'üîπ"–ù–∞—É—á–Ω—ã–π –±–æ–π" –º–µ–∂–¥—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏ –≤ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ 1 –ì–£–ú–∞\n'
                  'üîπ–≠–∫—Å–∫—É—Ä—Å–∏–∏ –≤ –Ω–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –∫–æ–º–ø–∞–Ω–∏–∏ - –¥–∞—Ç—ã —É—Ç–æ—á–Ω—è—é—Ç—Å—è\n'
                  'üîπ–ü–æ—Å–µ—â–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –∏ –∫–∞—Ñ–µ–¥—Ä —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ - –¥–∞—Ç—ã —É—Ç–æ—á–Ω—è—é—Ç—Å—è')


async def event_handler(bot: Bot, user: User, callback: CallbackQuery = None):
    if callback.data == 'event':
        user.action = 'event'
        await callback.message.edit_text(
            text=event_schedule,
            reply_markup=Keyboards.main_keyboard(user).as_markup(),
            parse_mode='Markdown')

    elif callback.data == 'event_quiz':
        quiz_user = await QuizUserDB.select(user_id=user.ID)

        if quiz_user:
            await callback.message.answer_animation(
                animation='CAACAgIAAxkBAAENuydnpTiNzWS2IdnMrurDoD893rBJZQACcAAD9wLIDyQpDCtech2jNgQ'
            )
            await callback.message.edit_text(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {quiz_user.count_true_answers} –∏–∑ 11 '
                                                  f'–≤–æ–ø—Ä–æ—Å–æ–≤! –ù–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—à–ª–æ '
                                                  f'{(quiz_user.end_datetime - quiz_user.start_datetime).total_seconds():.1f} c')
            await callback.message.answer(text=event_schedule,
                                          reply_markup=Keyboards.main_keyboard(user).as_markup(),
                                          parse_mode='Markdown')

        else:
            user.action = 'event_quiz'
            await callback.message.edit_text(
                text='–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. –í–ø–µ—Ä–µ–¥–∏ —Ç–µ–±—è –∂–¥—É—Ç 11 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π. \n\n'
                     '–ó–∞ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–≤–µ—Ç—ã —Ç—ã *–ø–æ–ª—É—á–∏—à—å –ø—Ä–∏–∑—ã*, –Ω–æ –∏–≥—Ä–∞–π —á–µ—Å—Ç–Ω–æ, –Ω–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–π –∏ –Ω–µ –≥–æ–≤–æ—Ä–∏ –æ—Ç–≤–µ—Ç—ã –¥—Ä—É–≥–∏–º '
                     '—É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –î–∞–≤–∞–π –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –∏–≥—Ä—ã.\n\n'
                     ''
                     '–ù–µ–±–æ–ª—å—à–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ç—ã *–Ω–µ —Å–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é*, –ø–æ–∫–∞ –Ω–µ '
                     '–∑–∞–∫–æ–Ω—á–∏—à—å –µ—ë. –ù–∞—á–∏–Ω–∞–µ–º?',
                reply_markup=Keyboards.start_quiz_keyboard().as_markup(),
                parse_mode='Markdown'
            )

    elif callback.data == 'event_quiz_started':
        user.action = 'event_quiz_started'
        question = await QuizDB.select(num=1)
        await callback.message.edit_text(text=question.question,
                                         reply_markup=Keyboards.quiz_keyboard(question).as_markup(),
                                         parse_mode='Markdown')
        await QuizUserDB.insert(QuizUser(user_id=user.ID))

    elif callback.data.startswith('event_quiz_started'):
        num, user_answer = callback.data.replace('event_quiz_started?', '').split('&')
        num = int(num.replace('num=', ''))
        user_answer = user_answer.replace('answer=', '')
        question = await QuizDB.select(num=num)
        quiz_user = await QuizUserDB.select(user_id=user.ID)

        await callback.message.edit_text(text=f'{question.question}\n\n'
                                              f'*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:*     {question.answer}',
                                         reply_markup=None,
                                         parse_mode='Markdown')

        if user_answer[:10] == question.answer[:10]:
            await callback.message.answer_animation(animation=random.choice(true_stickers))
            await callback.message.answer(text=random.choice(true_answers))
            quiz_user.count_true_answers += 1

        else:
            await callback.message.answer_animation(animation=random.choice(wrong_stickers))
            await callback.message.answer(text=random.choice(wrong_answers))

        if num == 11:
            quiz_user.end_datetime = datetime.now()

        if question.desc:
            pause = len(question.desc) // 24
            await callback.message.answer(f'{question.desc}\n\n'
                                          f'–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {pause} —Å')
            await asyncio.sleep(pause)

            try:
                await bot.edit_message_text(text=f'{question.desc}',
                                            chat_id=callback.message.chat.id,
                                            message_id=callback.message.message_id + 3,
                                            parse_mode='Markdown')
            except TelegramRetryAfter:
                pass

        if num < 11:
            question = await QuizDB.select(num=num + 1)
            await callback.message.answer(text=question.question,
                                          reply_markup=Keyboards.quiz_keyboard(question).as_markup(),
                                          parse_mode='Markdown')

        else:
            await callback.message.answer_animation(
                animation='CAACAgIAAxkBAAENuydnpTiNzWS2IdnMrurDoD893rBJZQACcAAD9wLIDyQpDCtech2jNgQ'
            )
            await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –æ—Ç–≤–µ—Ç–∏–≤ –≤–µ—Ä–Ω–æ –Ω–∞ '
                                               f'{quiz_user.count_true_answers} –∏–∑ 11 –≤–æ–ø—Ä–æ—Å–æ–≤! –ù–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—à–ª–æ '
                                               f'{(quiz_user.end_datetime - quiz_user.start_datetime).total_seconds():.1f} c',
                                          parse_mode='Markdown')
            await callback.message.answer(text=event_schedule,
                                          reply_markup=Keyboards.main_keyboard(user).as_markup(),
                                          parse_mode='Markdown')

        await QuizUserDB.update(quiz_user)
