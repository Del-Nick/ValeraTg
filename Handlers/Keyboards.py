import datetime

from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder, KeyboardBuilder
from aiogram.types import InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
import dataclasses

from Server.Models import User


@dataclasses.dataclass
class Buttons:
    homeworks: InlineKeyboardButton = InlineKeyboardButton(text='üìù –î–ó', callback_data='start_homeworks')
    books: InlineKeyboardButton = InlineKeyboardButton(text='üìö –£—á–µ–±–Ω–∏–∫–∏', callback_data='start_books')
    workshops: InlineKeyboardButton = InlineKeyboardButton(text='üî¨ –ü—Ä–∞–∫–∏', callback_data='start_workshops_main')

    schedule: InlineKeyboardButton = InlineKeyboardButton(text='üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='start_schedule')
    # schedule: InlineKeyboardButton = InlineKeyboardButton(text='üìÜ –°–µ—Å—Å–∏—è', callback_data='start_session')

    settings: InlineKeyboardButton = InlineKeyboardButton(text='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings_main')
    headman: InlineKeyboardButton = InlineKeyboardButton(text='üòé –°—Ç–∞—Ä–æ—Å—Ç–∞ Mode', callback_data='headman_main')

    admin: InlineKeyboardButton = InlineKeyboardButton(text='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data='admin_start')

    no: KeyboardButton = KeyboardButton(text='‚ùå –ù–µ—Ç')
    yes: KeyboardButton = KeyboardButton(text='‚úÖ –î–∞')

    no_group: KeyboardButton = KeyboardButton(text='–ù–µ—Ç –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã')
    not_student: KeyboardButton = KeyboardButton(text='–Ø –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç —Ñ–∏–∑—Ñ–∞–∫–∞')

    later: KeyboardButton = KeyboardButton(text='–ù–∞–ø–∏—à—É –ø–æ–∑–∂–µ')


@dataclasses.dataclass
class Weekdays:
    mon: InlineKeyboardButton = InlineKeyboardButton(text='–ü–ù', callback_data=f'start_schedule_day=0')
    tue: InlineKeyboardButton = InlineKeyboardButton(text='–í–¢', callback_data=f'start_schedule_day=1')
    wed: InlineKeyboardButton = InlineKeyboardButton(text='–°–†', callback_data=f'start_schedule_day=2')
    thu: InlineKeyboardButton = InlineKeyboardButton(text='–ß–¢', callback_data=f'start_schedule_day=3')
    fri: InlineKeyboardButton = InlineKeyboardButton(text='–ü–¢', callback_data=f'start_schedule_day=4')
    sat: InlineKeyboardButton = InlineKeyboardButton(text='–°–ë', callback_data=f'start_schedule_day=5')

    def __init__(self, group: str = None):
        if group:
            self.mon = InlineKeyboardButton(text='–ü–ù', callback_data=f'start_schedule_day=0_group={group}')
            self.tue = InlineKeyboardButton(text='–í–¢', callback_data=f'start_schedule_day=1_group={group}')
            self.wed = InlineKeyboardButton(text='–°–†', callback_data=f'start_schedule_day=2_group={group}')
            self.thu = InlineKeyboardButton(text='–ß–¢', callback_data=f'start_schedule_day=3_group={group}')
            self.fri = InlineKeyboardButton(text='–ü–¢', callback_data=f'start_schedule_day=4_group={group}')
            self.sat = InlineKeyboardButton(text='–°–ë', callback_data=f'start_schedule_day=5_group={group}')


def standard_keyboard(user: User):
    keyboard = InlineKeyboardBuilder()

    group = user.groups[0]
    b = Buttons()

    if len(group) == 3 and int(group[0]) < 4:
        keyboard.row(b.homeworks, b.books, b.workshops)
    else:
        keyboard.row(b.homeworks, b.books)

    keyboard.row(b.schedule)

    if user.settings.headman:
        keyboard.row(b.settings, b.headman)
    else:
        keyboard.row(b.settings)

    if user.settings.admin:
        keyboard.row(b.admin)

    return keyboard


def later_keyboard():
    return ReplyKeyboardMarkup(keyboard=[[Buttons.later]], resize_keyboard=True)


def yes_no_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text='–ù–µ—Ç', callback_data='registration_help_no'),
                 InlineKeyboardButton(text='–î–∞', callback_data='registration_help_yes'))
    return keyboard


def cancel_keyboard_usual():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)


# TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ callback!!
def groups_keyboard(main_part_callback: str, groups: list) -> InlineKeyboardBuilder:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏, –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param main_part_callback: Callback —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –æ–±—Ä–∞–∑—Ü—É {main_part_callback}={group}
    :param groups: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
    :return: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = InlineKeyboardBuilder()
    for group in groups:
        keyboard.button(text=group, callback_data=f'{main_part_callback}={group}')

    keyboard.row(InlineKeyboardButton(text='–ù–µ—Ç –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã',
                                      callback_data=f'{main_part_callback}=no_exist'))

    return keyboard


def groups_to_delete_keyboard(groups) -> KeyboardBuilder[InlineKeyboardButton]:
    keyboard = InlineKeyboardBuilder()
    for i, group in enumerate(groups):
        groups[i] = InlineKeyboardButton(text=group, callback_data=f'settings_delete_group={group}')

    return keyboard.row(*groups)


def not_student_keyboard(main_callback_part: str) -> InlineKeyboardBuilder:
    keyboard = InlineKeyboardBuilder()
    return keyboard.button(text='–Ø –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç —Ñ–∏–∑—Ñ–∞–∫–∞',
                           callback_data=f'{main_callback_part}=not_student')


def empty_keyboard() -> ReplyKeyboardRemove:
    return ReplyKeyboardRemove()


def schedule_keyboard(user: User, group: str, day: int = None) -> InlineKeyboardBuilder:
    keyboard = InlineKeyboardBuilder()

    if day is not None:
        weekdays = Weekdays(group) if group != user.groups[0] else Weekdays()
        weekdays = [weekdays.mon, weekdays.tue, weekdays.wed, weekdays.thu, weekdays.fri, weekdays.sat]

        del weekdays[day]

        keyboard.row(*weekdays)

    day = day if day else datetime.datetime.now().day

    if len(user.groups) > 1:
        groups = []
        if group != user.groups[0]:
            groups.append(InlineKeyboardButton(text=user.groups[0], callback_data=f'start_schedule_day={day}'))

        for user_group in user.groups[1:]:
            if group != user_group:
                groups.append(InlineKeyboardButton(text=user_group,
                                                   callback_data=f'start_schedule_day={day}_group={user_group}'))

        keyboard.row(*groups)

    elif group != user.groups[0]:
        keyboard.row(InlineKeyboardButton(text=user.groups[0], callback_data=f'start_schedule_day={day}'))

    keyboard.row(InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É', callback_data='start_schedule_get_custom_group'))
    keyboard.row(InlineKeyboardButton(text='–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ', callback_data='start_get_error'))
    keyboard.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start_menu'))

    return keyboard


@dataclasses.dataclass
class SettingsActions:
    settings: str = 'settings'
    main: str = 'main'
    get_schedule_time: str = 'get_schedule_time'
    change_main_group: str = 'change_main_group'

    delete_group: str = 'delete_group'
    add_group: str = 'add_group'

    change_full_schedule: str = 'change_full_schedule'
    change_notifications: str = 'change_notifications'
    get_new_main_group_alert_sent: str = 'get_new_main_group_alert_sent'
    get_time_for_schedule_sender: str = 'get_time_for_schedule_sender'
    get_vk_id: str = 'get_vk_id'

    @staticmethod
    def joiner(method: str) -> str:
        return f'settings_{method}'


def settings_keyboard(user: User):
    keyboard = InlineKeyboardBuilder()

    acts = SettingsActions()

    keyboard.row(InlineKeyboardButton(
        text=f'üïí –í—Ä–µ–º—è: {user.settings.tomorrow_schedule_after.strftime("%H:%M")}',
        callback_data=acts.joiner(acts.get_schedule_time)),
        InlineKeyboardButton(
            text='üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É',
            callback_data=acts.joiner(acts.change_main_group)))

    keyboard.row(InlineKeyboardButton(
        text=f'–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É',
        callback_data=acts.joiner(acts.delete_group)),
        InlineKeyboardButton(
            text='–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É',
            callback_data=acts.joiner(acts.add_group)))

    if user.settings.full_schedule:
        full_schedule = InlineKeyboardButton(text='–í—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ‚úÖ',
                                             callback_data=acts.joiner(acts.change_full_schedule))
    else:
        full_schedule = InlineKeyboardButton(text='–í—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ‚òë',
                                             callback_data=acts.joiner(acts.change_full_schedule))

    if user.settings.notifications:
        notifications = InlineKeyboardButton(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ',
                                             callback_data=acts.joiner(acts.change_notifications))
    else:
        notifications = InlineKeyboardButton(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚òë',
                                             callback_data=acts.joiner(acts.change_notifications))

    keyboard.row(full_schedule, notifications)

    if not user.VkID:
        keyboard.row(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å VkID',
                                          callback_data=acts.joiner(acts.get_vk_id)))

    keyboard.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                      callback_data='start_menu'))

    return keyboard


def custom_keyboard(callback_back_button,
                    main_callback: str = None,
                    buttons: list[tuple[str, str]] = None,
                    buttons_in_row: int = 2) -> InlineKeyboardBuilder:
    """
    –®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :param buttons_in_row: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :param main_callback: –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å CallbackQuery, —Å –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
    :param buttons: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–¢–µ–∫—Å—Ç, CallbackData)
    :param callback_back_button: CallbackData –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
    :return: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = InlineKeyboardBuilder()

    if buttons:
        for button in buttons:
            keyboard.button(text=button[0],
                            callback_data=f'{main_callback}_{button[1]}')

        keyboard.adjust(buttons_in_row)

    keyboard.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                      callback_data=callback_back_button))

    return keyboard
